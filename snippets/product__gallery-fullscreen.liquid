<!-- snippets/product__gallery-fullscreen.liquid -->
{% comment %} 
  A fullscreen overlay of zoomable product images

  Usage:
    {% render 'product__gallery-fullscreen' %}

  Globals:
    - settings.layout_horizontal: horizontaly margin
    - settings.thumbmails_color_scheme: color scheme of thumbnails
{% endcomment %}

<!-- fullscreen images -->
{% if featured %}
  {%- assign product = section.settings.product -%}
{% endif %}

{% capture fullscreen_content %}

  {%- capture slides -%}
    {% for media in product.media %}
      {% case media.media_type %}
        {% when 'image' %}
          <div class="md:snap-center flex justify-center flex-none w-full h-full items-center whitespace-normal relative
            {{ settings.thumbmails_color_scheme }}" 
            :class="{ 'z-10' : gallery_index == {{ forloop.index0 }}}"
            x-intersect:enter.full="gallery_index = {{ forloop.index0 }};"
            x-bind:data-slide="{{ forloop.index0 }}"
            @click="zoom = !zoom">
            <div class="flex items-center justify-center flex-none w-full h-full"
              x-show="!zoom">
              {% capture image_class %}{{ settings.thumbmails_color_scheme }} absolute contain max-h-full w-auto{% endcapture %}
              {{ media
                | image_url: width: media.width 
                | image_tag: class: image_class, loading: 'lazy', alt: media.alt }}
            </div>
            <div class="flex items-center justify-center flex-none w-full h-full pointer-events-none"
              :class="{ 'hidden' : !zoom }"
              x-bind:style="
                'transform: translate('+(((mouse_x/width)-0.5)*100)+'%, '+(((mouse_y/height)-0.5)*100)+'%)'"
              x-show="zoom"
              x-cloak>
              {% capture image_class %}{{ settings.thumbmails_color_scheme }} absolute contain h-auto w-[200%] max-w-none{% endcapture %}
              {{ media
                | image_url: width: media.width 
                | image_tag: class: image_class, loading: 'lazy', alt: media.alt }}
            </div>
          </div>

      {% endcase %}
      
    {% endfor %}
  {%- endcapture -%}
  
  <div class="flex flex-col w-full"
    x-data="{
      gallery_index: 0,
      gallery_index_scroll: 0,
      gallery_index_size: {{ product.media.size | minus: 1 }},
      show_arrows: true,
      zoom: false,
      mouse_x: 0,
      mouse_y: 0,
      height: 0,
      width: 0,
      isOverflown(element) {
        return element.scrollWidth > element.clientWidth;
      },
      slideExists(index) {
        let slider = this.$refs.slider;
        let slide = slider.querySelector('[data-slide=&quot;' + index + '&quot;]');
        return slide !== null;
      },
      scrollNext() {
        this.gallery_index_scroll = this.gallery_index + 1;
        while (this.gallery_index_scroll <= this.gallery_index_size) {
          if (this.slideExists(this.gallery_index_scroll)) {
            this.scrollToIndex(this.gallery_index_scroll);
            return;
          }
          this.gallery_index_scroll++;
        }
        // If reached the end, wrap around to the first slide
        this.gallery_index_scroll = 0;
        this.scrollToIndex(this.gallery_index_scroll);
      },
      
      scrollBack() {
        this.gallery_index_scroll = this.gallery_index - 1;
        while (this.gallery_index_scroll >= 0) {
          if (this.slideExists(this.gallery_index_scroll)) {
            this.scrollToIndex(this.gallery_index_scroll);
            return;
          }
          this.gallery_index_scroll--;
        }
        // If reached the beginning, wrap around to the last slide
        this.gallery_index_scroll = this.gallery_index_size;
        this.scrollToIndex(this.gallery_index_scroll);
      },
    
      scrollToIndex(gallery_index_scroll) {
        this.gallery_index = gallery_index_scroll;
        let slider = this.$refs.slider;
        let currentSlide = slider.querySelector('[data-slide=&quot;' + gallery_index_scroll + '&quot;]');
    
        const checkIfHidden = (el, index) => {
          if(!el) {
            this.gallery_index_scroll++
            currentSlide = slider.querySelector('[data-slide=&quot;' + this.gallery_index_scroll++ + '&quot;]');
            console.log(currentSlide, this.gallery_index_scroll);
            checkIfHidden(currentSlide, this.gallery_index_scroll)
          }
        }
       checkIfHidden(currentSlide, this.gallery_index_scroll);
       if (currentSlide) {
        let currentSlidePosition = currentSlide.offsetLeft;
          slider.scrollTo({
            top: 0,
            left: currentSlidePosition,
            behavior: 'smooth'
          });
        }
        let thumbnailSlider = this.$refs.thumbnail_slider;
        if (thumbnailSlider){
          let currentThumb = thumbnailSlider.querySelector('[data-slide=&quot;' + gallery_index_scroll + '&quot;]');
          if (currentThumb) {
            let currentThumbPosition = currentThumb.offsetTop;
            thumbnailSlider.scrollTo({
              top: currentThumbPosition-200,
              left: 0,
              behavior: 'smooth'
            });
          }
        }
      }
    }"
    x-trap="fullscreen"
    @keyup.left="scrollBack();"
    @keyup.right="scrollNext();">

    <div class="relative flex flex-grow w-full"
      x-ref="fullscreen"
      @mousemove="
        height = $refs.fullscreen.offsetHeight;
        width = $refs.fullscreen.offsetWidth;
        mouse_x = $event.offsetX; 
        mouse_y = $event.offsetY;">

      {%- comment -%} slides {%- endcomment -%}
      <div class="whitespace-nowrap md:snap-x md:gap-4 scroll-smooth hidescrollbar inline-flex w-full gap-2 overflow-x-auto overflow-y-hidden"
        x-init="setTimeout(function(){ if (isOverflown($el)) show_arrows = true}, 600);"  
        x-ref="slider">
        {{ slides }}
      </div>

      {% comment %} overlays {% endcomment %}
      {% if product.media.size > 1 %}
        <div class="top-4 absolute left-0 right-0 z-20 px-4 text-center">
          <div class="type--small pb-2">
            <span x-text="gallery_index+1">1</span>/<span>{{ product.images.size }}</span>
          </div>
        </div>
        <div class="bottom-4 absolute left-0 right-0 z-20 px-4 text-center">
          <div class="flex flex-wrap items-center justify-center gap-2">
            {% for media in product.media %}
              <button class="{% unless media.media_type == 'image' %} hidden {% endunless %}color__bg-text animation-100 border--radius w-3 h-1 opacity-25" 
                :class="{ '!opacity-100': gallery_index === {{ forloop.index0 }} }"
                @click="gallery_index_scroll = {{ forloop.index0 }}; scrollToIndex(gallery_index_scroll);"></button>
            {% endfor %}
          </div>
        </div>
      {% endif %}

    </div>
    
    {% comment %} controls {% endcomment %}
    <div class="py-4 w-full
      {{ settings.layout_horizontal }}">
      <div class="flex justify-between">
        <div class="md:flex hidden gap-2">
          <button class="btn btn--plain btn--small"
            @click="zoom = false">
            {% render 'component__icon', icon: 'minus', size: '20', class: '' %}
          </button>
          <button class="btn btn--plain btn--small"
            @click="zoom = true">
            {% render 'component__icon', icon: 'plus', size: '20', class: '' %}
          </button>
        </div>
        <button class="btn btn--smaller btn--plain" 
          @click="fullscreen = false; hide_header = false;">
          {% render 'component__icon', icon: 'x', size: '24', class: '' %} {{ 'general.navigation.close' | t }}
        </button>
        <div class="flex gap-2">
          <button class="btn btn--plain btn--small"
            title="{{ 'general.media.previous_slide' | t }}"
            @click="scrollBack();">
            {% render 'component__icon', icon: 'arrow-left', size: '20', class: '' %}
          </button>
          <button class="btn btn--plain btn--small"
            title="{{ 'general.media.next_slide' | t }}"
            @click="scrollNext();">
            {% render 'component__icon', icon: 'arrow-right', size: '20', class: '' %}
          </button>
        </div>
      </div>
    </div>
    
  </div>
{% endcapture %}
{% render 'component__fullscreen', 
  fullscreen_id: 'fullscreen',
  content: fullscreen_content %}